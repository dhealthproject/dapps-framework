/**
 * This file is part of dHealth dApps Framework shared under LGPL-3.0
 * Copyright (C) 2022-present dHealth Network, All rights reserved.
 *
 * @package     dHealth dApps Framework
 * @subpackage  Backend
 * @author      dHealth Network <devs@dhealth.foundation>
 * @license     LGPL-3.0
 */
// external dependencies
import { Injectable } from "@nestjs/common";
import { ConfigService } from "@nestjs/config";
import { OnEvent } from "@nestjs/event-emitter";

// internal dependencies
import { AlertEvent } from "../../common/events/AlertEvent";
import { NotifierFactory } from "../concerns/NotifierFactory";
import { AlertsConfig } from "../../common/models/MonitoringConfig";
import { LogService } from "../../common/services/LogService";
import { Notifier } from "../models/Notifier";
import { NotifierType } from "../models/NotifierType";
import { DappHelper } from "../../common/concerns/DappHelper";

/**
 * @class AlertNotifier
 * @description The alert notifier that will send a notification when
 * a warn/error log occurs within the application's api and schedulers.
 * <br /><br />
 * This class is in essential an event listener that listens to and handles
 * warning/error events from the {@link LogService}.
 * <br /><br />
 * When handling events, this class utilizes the {@link Notifier} strategy
 * instance to send notification to specified recipient(s) using configured
 * transport method as defined within {@link AlertsConfig}.
 * <br /><br />
 * Currently this class listens and handles these events:
 * | Name | Description |
 * | --- | --- |
 * | `event.log.warn`     | The event in which a warning log occured in the application. |
 * | `event.log.error`    | The event in which an error log occured in the application. |
 *
 * @since v0.3.2
 */
@Injectable()
export class AlertNotifier {
  /**
   * The configuration object in which specifies the type of
   * event, the notification transport and recipient(s) details.
   *
   * @access private
   * @var {AlertsConfig}
   */
  private readonly alertsConfig: AlertsConfig;

  /**
   * The {@link Notifier} strategy of this class. Depending on
   * the transport method specified in the {@link ReportsConfig}
   * this will be generated by the {@link NotifierFactory}.
   *
   * @access private
   * @var {Notifier}
   */
  private readonly notifier: Notifier;

  /**
   * Constructs and prepares an instance of this class.
   *
   * @param {LogService}      logger
   * @param {ConfigService}   configService
   * @param {NotifierFactory} notifierFactory
   * @param {DappHelper}      dappHelper
   */
  constructor(
    private readonly logger: LogService,
    private readonly configService: ConfigService,
    private readonly notifierFactory: NotifierFactory,
    private readonly dappHelper: DappHelper,
  ) {
    // get config
    this.alertsConfig = this.configService.get<AlertsConfig>("alerts");

    // set context for this instance's logger
    this.logger.setContext(`AlertsNotifier`);

    // get the notifier strategy from the configured transport method
    this.notifier = this.notifierFactory.getNotifier(
      this.alertsConfig.transport as NotifierType,
    );
  }

  /**
   * Main method to handle `event.log.warn` event.
   *
   * @access protected
   * @param event
   * @return {void}
   */
  @OnEvent("event.log.warn", { async: true })
  protected handleLogWarnEvent(event: AlertEvent): void {
    // handle and process "AlertEvent" event
    this.logger.debug("Caught a warning event.");
    if (this.alertsConfig.type.includes("warn")) {
      const dappName = this.configService.get<string>("dappName");
      const { timestamp, level, loggerContext, message, context } = event;
      this.notifier.sendInternal({
        to: this.alertsConfig.recipient,
        subject: `[${dappName}] Warning: Production warning happened at ${new Date()}`,
        text: `Warning: Production warning happened at ${new Date()} ${this.dappHelper.createDetailsTableHTML(
          [{ timestamp, level, loggerContext, message, context }],
        )}`,
        html: `Warning: Production warning happened at <b>${new Date()}</b><br /><br /> ${this.dappHelper.createDetailsTableHTML(
          [{ timestamp, level, loggerContext, message, context }],
        )}`, // HTML body content
      });
    }
  }

  /**
   * Main method to handle `event.log.error` event.
   *
   * @access protected
   * @param event
   * @return {void}
   */
  @OnEvent("event.log.error", { async: true })
  protected handleLogErrorEvent(event: AlertEvent): void {
    // handle and process "AlertEvent" event
    this.logger.debug("Caught an error event.");
    if (this.alertsConfig.type.includes("error")) {
      const dappName = this.configService.get<string>("dappName");
      const { timestamp, level, loggerContext, message, trace, context } =
        event;
      this.notifier.sendInternal({
        to: this.alertsConfig.recipient,
        subject: `[${dappName}] Error: Production error happened at ${new Date()}`,
        text: `Error: Production error happened at ${new Date()} ${this.dappHelper.createDetailsTableHTML(
          [{ timestamp, level, loggerContext, message, trace, context }],
        )}`,
        html: `Error: Production error happened at <b>${new Date()}</b><br /><br /> ${this.dappHelper.createDetailsTableHTML(
          [{ timestamp, level, loggerContext, message, trace, context }],
        )}`, // HTML body content
      });
    }
  }
}
